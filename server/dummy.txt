func Upload(w http.ResponseWriter, r *http.Request) {
	util.EnableCors(&w)

	// less than 50 MB max
	r.Body = http.MaxBytesReader(w, r.Body, 1024*1024*500)

	err := r.ParseMultipartForm(5000)
	if err != nil {
		w.WriteHeader(400)
		w.Write([]byte("File is too large"))
		return
	}

	// check if no filter option in request body
	if len(r.MultipartForm.Value["filter"]) <= 0 {
		w.WriteHeader(400)
		return
	}

	// check if no sessionId in request body
	if len(r.MultipartForm.Value["uid"]) <= 0 {
		w.WriteHeader(400)
		return
	}

	form_uuid := r.MultipartForm.Value["uid"][0]

	// validate uuid
	_, err = uuid.Parse(form_uuid)
	if err != nil {
		w.WriteHeader(400)
		return
	}

	// validate if this uuid is already registered
	if data.InMemoryUUID.ItemExist(form_uuid) {
		w.WriteHeader(400)
		return
	}

	files := r.MultipartForm.File["files"]
	job := models.Job{Uid: form_uuid, Filter: r.MultipartForm.Value["filter"][0]}
	for _, file := range files {

		f, err := file.Open()
		if err != nil {
			w.WriteHeader(400)
			logger.MyLog.Fatal(err)
			return
		}
		defer f.Close()

		// validate image type
		if !util.ValidImageType(file.Header["Content-Type"][0]) {
			w.WriteHeader(400)
			logger.MyLog.Fatal("Invalid data type")
			return
		}

		_, err = util.SaveFile(f, file.Filename, form_uuid)
		if err != nil {
			logger.MyLog.Fatal(err)
		}

		img := models.Image{Name: file.Filename, Path: path.Join("uploaded", form_uuid+"_"+file.Filename)}
		job.Images = append(job.Images, img)
	}

	data.InMemoryUUID.Add(form_uuid, struct{}{})
	presist.AddUUID(form_uuid)

	MyQueue.Enqueue(job)
	presist.AddJob(job)

	w.WriteHeader(200)
}